// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eNote.Services.Database;

#nullable disable

namespace eNote.Services.Migrations
{
    [DbContext(typeof(ENoteContext))]
    [Migration("20240824091334_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eNote.Services.Database.Adresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Broj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Adresa");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Broj = "12",
                            Grad = "Sarajevo",
                            Ulica = "Bistrik"
                        },
                        new
                        {
                            Id = 2,
                            Broj = "15",
                            Grad = "Sarajevo",
                            Ulica = "Maršala Tita"
                        },
                        new
                        {
                            Id = 3,
                            Broj = "8",
                            Grad = "Sarajevo",
                            Ulica = "Mula Mustafe Bašeskije"
                        },
                        new
                        {
                            Id = 4,
                            Broj = "18",
                            Grad = "Sarajevo",
                            Ulica = "Obala Kulina bana"
                        },
                        new
                        {
                            Id = 5,
                            Broj = "14",
                            Grad = "Sarajevo",
                            Ulica = "Veliki Alifakovac"
                        });
                });

            modelBuilder.Entity("eNote.Services.Database.Instrumenti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Dostupan")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MusicShopId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proizvodjac")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("VrstaInstrumenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MusicShopId");

                    b.ToTable("Instrumenti");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Dostupan = true,
                            Model = "J-45",
                            MusicShopId = 1,
                            Opis = "Ikonična akustična gitara poznata po bogatom, punom zvuku.",
                            Proizvodjac = "Gibson",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 2,
                            Dostupan = true,
                            Model = "214ce",
                            MusicShopId = 1,
                            Opis = "Popularna grand auditorium akustična gitara sa svijetlim, jasnim tonom.",
                            Proizvodjac = "Taylor",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 3,
                            Dostupan = true,
                            Model = "CD-60S",
                            MusicShopId = 1,
                            Opis = "Pristupačna akustična gitara savršena za početnike i srednje napredne svirače.",
                            Proizvodjac = "Fender",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 4,
                            Dostupan = true,
                            Model = "Stratocaster",
                            MusicShopId = 1,
                            Opis = "Klasična električna gitara poznata po svojoj svestranosti i glatkoj svirljivosti.",
                            Proizvodjac = "Fender",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 5,
                            Dostupan = true,
                            Model = "Les Paul",
                            MusicShopId = 1,
                            Opis = "Legendarna električna gitara omiljena zbog bogatog tona i održavanja.",
                            Proizvodjac = "Gibson",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 6,
                            Dostupan = true,
                            Model = "RG",
                            MusicShopId = 1,
                            Opis = "Visokoperformansna električna gitara popularna među rok i metal sviračima.",
                            Proizvodjac = "Ibanez",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 7,
                            Dostupan = true,
                            Model = "Custom 24",
                            MusicShopId = 1,
                            Opis = "Visokokvalitetna električna gitara poznata po svojoj prelijepoj izradi i zvuku.",
                            Proizvodjac = "PRS",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 8,
                            Dostupan = true,
                            Model = "Pacifica",
                            MusicShopId = 1,
                            Opis = "Svestrana električna gitara pogodna za različite žanrove.",
                            Proizvodjac = "Yamaha",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 9,
                            Dostupan = true,
                            Model = "Dinky",
                            MusicShopId = 1,
                            Opis = "Električna gitara dizajnirana za brzo sviranje i snažan zvuk.",
                            Proizvodjac = "Jackson",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 10,
                            Dostupan = true,
                            Model = "C-1",
                            MusicShopId = 1,
                            Opis = "Električna gitara poznata po svojoj čvrstoj izradi i teškim tonovima.",
                            Proizvodjac = "Schecter",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 11,
                            Dostupan = true,
                            Model = "Precision Bass",
                            MusicShopId = 1,
                            Opis = "Industrijski standard bas gitara poznata po dubokom, udarnom zvuku.",
                            Proizvodjac = "Fender",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 12,
                            Dostupan = true,
                            Model = "SR",
                            MusicShopId = 1,
                            Opis = "Elegantna bas gitara popularna zbog svog brzog vrata i svestranih tonova.",
                            Proizvodjac = "Ibanez",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 13,
                            Dostupan = true,
                            Model = "Thunderbird",
                            MusicShopId = 1,
                            Opis = "Ikonična bas gitara poznata po jedinstvenom dizajnu i snažnom zvuku.",
                            Proizvodjac = "Gibson",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 14,
                            Dostupan = true,
                            Model = "BB",
                            MusicShopId = 1,
                            Opis = "Pouzdana bas gitara sa velikim balansom svirljivosti i tona.",
                            Proizvodjac = "Yamaha",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 15,
                            Dostupan = true,
                            Model = "RockBass",
                            MusicShopId = 1,
                            Opis = "Bas gitara poznata po svom jedinstvenom 'growl' tonu i ergonomskoj izradi.",
                            Proizvodjac = "Warwick",
                            VrstaInstrumenta = "Zicani"
                        },
                        new
                        {
                            Id = 16,
                            Dostupan = true,
                            Model = "Export",
                            MusicShopId = 1,
                            Opis = "Pristupačan bubanj set savršen za početnike i srednje napredne bubnjare.",
                            Proizvodjac = "Pearl",
                            VrstaInstrumenta = "Udaraljke"
                        },
                        new
                        {
                            Id = 17,
                            Dostupan = true,
                            Model = "Imperialstar",
                            MusicShopId = 1,
                            Opis = "Svestran bubanj set sa izvrsnom izradom i zvukom.",
                            Proizvodjac = "Tama",
                            VrstaInstrumenta = "Udaraljke"
                        },
                        new
                        {
                            Id = 18,
                            Dostupan = true,
                            Model = "Breakbeats",
                            MusicShopId = 1,
                            Opis = "Kompaktni bubanj set dizajniran za prenosivost i odličan ton.",
                            Proizvodjac = "Ludwig",
                            VrstaInstrumenta = "Udaraljke"
                        },
                        new
                        {
                            Id = 19,
                            Dostupan = true,
                            Model = "Mark VI",
                            MusicShopId = 1,
                            Opis = "Legendarni saksofon poznat po izvrsnom tonu i svirljivosti.",
                            Proizvodjac = "Selmer",
                            VrstaInstrumenta = "Limeni"
                        },
                        new
                        {
                            Id = 20,
                            Dostupan = true,
                            Model = "YAS-280",
                            MusicShopId = 1,
                            Opis = "Popularni saksofon među studentima i srednje naprednim sviračima.",
                            Proizvodjac = "Yamaha",
                            VrstaInstrumenta = "Limeni"
                        },
                        new
                        {
                            Id = 24,
                            Dostupan = true,
                            Model = "Stradivarius",
                            MusicShopId = 1,
                            Opis = "Profesionalni trombon poznat po bogatom tonu i preciznoj intonaciji.",
                            Proizvodjac = "Bach",
                            VrstaInstrumenta = "Limeni"
                        },
                        new
                        {
                            Id = 25,
                            Dostupan = true,
                            Model = "YSL-354",
                            MusicShopId = 1,
                            Opis = "Studentski trombon poznat po svojoj izdržljivosti i lakoći sviranja.",
                            Proizvodjac = "Yamaha",
                            VrstaInstrumenta = "Limeni"
                        },
                        new
                        {
                            Id = 21,
                            Dostupan = true,
                            Model = "Minilogue",
                            MusicShopId = 1,
                            Opis = "Analogni sintisajzer poznat po svom bogatom, toplom zvuku.",
                            Proizvodjac = "Korg",
                            VrstaInstrumenta = "Tipke"
                        },
                        new
                        {
                            Id = 22,
                            Dostupan = true,
                            Model = "Juno-DS",
                            MusicShopId = 1,
                            Opis = "Svestrani sintisajzer popularan za žive nastupe i studijsku upotrebu.",
                            Proizvodjac = "Roland",
                            VrstaInstrumenta = "Tipke"
                        },
                        new
                        {
                            Id = 23,
                            Dostupan = true,
                            Model = "Sub Phatty",
                            MusicShopId = 1,
                            Opis = "Analogni sintisajzer poznat po svom snažnom basu i lead tonovima.",
                            Proizvodjac = "Moog",
                            VrstaInstrumenta = "Tipke"
                        });
                });

            modelBuilder.Entity("eNote.Services.Database.IznajmljivanjeInstrumenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CijenaIznajmljivanja")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTime>("DatumIznajmljivanja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPovratka")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstrumentId")
                        .HasColumnType("int");

                    b.Property<int>("StanjeIznajmljivanja")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstrumentId");

                    b.HasIndex("StudentId");

                    b.ToTable("IznajmljivanjeInstrumenata");
                });

            modelBuilder.Entity("eNote.Services.Database.Korisnik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresaId");

                    b.HasIndex("UlogaId");

                    b.ToTable("Korisnici");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdresaId = 1,
                            DatumRodjenja = new DateTime(1996, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@outlook.com",
                            Ime = "Admin",
                            KorisnickoIme = "admin",
                            LozinkaHash = "szscCuh10ehcpvsOIyaAGlgpRuVYxqYbqQKpys6CKyY=",
                            LozinkaSalt = "K1RoXmN03WlUNlIQIkFWQw==",
                            Prezime = "Admin",
                            Status = true,
                            Telefon = "000000000",
                            UlogaId = 1
                        },
                        new
                        {
                            Id = 2,
                            AdresaId = 4,
                            DatumRodjenja = new DateTime(1997, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@outlook.com",
                            Ime = "John",
                            KorisnickoIme = "instruktor",
                            LozinkaHash = "B6Haiy3AuI2llq/S49dqxlVzTCw8Vv23gfsMXIEMHZ0=",
                            LozinkaSalt = "CcwYSrcFSwYp7y42xxg+1g==",
                            Prezime = "Doe",
                            Status = true,
                            Telefon = "111111111",
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 3,
                            AdresaId = 5,
                            DatumRodjenja = new DateTime(1967, 3, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.doe@outlook.com",
                            Ime = "Jane",
                            KorisnickoIme = "polaznik",
                            LozinkaHash = "Lze5t5qg4XbsG9boqQ9CsyWqhma/GaIjVr9p1pgGtW4=",
                            LozinkaSalt = "9I0Ve42LkphAsHohOlJ/Qg==",
                            Prezime = "Doe",
                            Status = true,
                            Telefon = "222222222",
                            UlogaId = 3
                        });
                });

            modelBuilder.Entity("eNote.Services.Database.Kurs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrojUpisanih")
                        .HasColumnType("int");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateTime>("DatumPocetka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<int>("InstruktorId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InstruktorId");

                    b.ToTable("Kurs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojUpisanih = 0,
                            Cijena = 800m,
                            DatumPocetka = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumZavrsetka = new DateTime(2024, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstruktorId = 2,
                            Naziv = "Osnove teorije muzike",
                            Opis = "Testni opis kursa osnova teorije muzke."
                        },
                        new
                        {
                            Id = 2,
                            BrojUpisanih = 0,
                            Cijena = 800m,
                            DatumPocetka = new DateTime(2024, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumZavrsetka = new DateTime(2024, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InstruktorId = 2,
                            Naziv = "Napredne tehnike gitare",
                            Opis = "Otkrijte napredne tehnike gitare, uključujući kompleksne akorde, improvizaciju i solo sviranje, kako biste unaprijedili svoje vještine i kreativnost na gitari."
                        });
                });

            modelBuilder.Entity("eNote.Services.Database.MusicShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresaId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresaId");

                    b.HasIndex("UlogaId");

                    b.ToTable("MusicShops");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdresaId = 2,
                            Email = "shop1@outlook.com",
                            KorisnickoIme = "shop1",
                            LozinkaHash = "sKnmbsMFlvpdhdRQVpgcoflPZMGiqQ3iZoFYX09Vilw=",
                            LozinkaSalt = "Sv/JXST1J06Xi2dxUWMnDg==",
                            Naziv = "Bonemeal Music Shop",
                            Status = true,
                            Telefon = "333333333",
                            UlogaId = 4
                        });
                });

            modelBuilder.Entity("eNote.Services.Database.Obavijest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumVrijemePostavljanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PredavanjeId")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PredavanjeId");

                    b.ToTable("Obavijesti");
                });

            modelBuilder.Entity("eNote.Services.Database.PredajaZadatka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumVrijemePredaje")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Ocjena")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ZadatakId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("ZadatakId");

                    b.ToTable("PredajaZadatka");
                });

            modelBuilder.Entity("eNote.Services.Database.Predavanje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumVrijemePredavanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KursId")
                        .HasColumnType("int");

                    b.Property<string>("Lokacija")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusPredavanja")
                        .HasColumnType("int");

                    b.Property<int>("TipPredavanja")
                        .HasColumnType("int");

                    b.Property<int>("TrajanjeMinute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KursId");

                    b.ToTable("Predavanja");
                });

            modelBuilder.Entity("eNote.Services.Database.Prisustvo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("PotvrdaPrisustva")
                        .HasColumnType("bit");

                    b.Property<int>("PredavanjeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PredavanjeId");

                    b.HasIndex("StudentId");

                    b.ToTable("Prisustva");
                });

            modelBuilder.Entity("eNote.Services.Database.Uloge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Uloge");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Instruktor"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Polaznik"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Shop"
                        });
                });

            modelBuilder.Entity("eNote.Services.Database.Upis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KursId")
                        .HasColumnType("int");

                    b.Property<int>("StatusUpisa")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KursId");

                    b.HasIndex("StudentId");

                    b.ToTable("Upisi");
                });

            modelBuilder.Entity("eNote.Services.Database.Zadatak", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumVrijemePredaje")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PredavanjeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PredavanjeId");

                    b.ToTable("Zadaci");
                });

            modelBuilder.Entity("eNote.Services.Database.Instrumenti", b =>
                {
                    b.HasOne("eNote.Services.Database.MusicShop", "MusicShop")
                        .WithMany("Instrumenti")
                        .HasForeignKey("MusicShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MusicShop");
                });

            modelBuilder.Entity("eNote.Services.Database.IznajmljivanjeInstrumenta", b =>
                {
                    b.HasOne("eNote.Services.Database.Instrumenti", "Instrument")
                        .WithMany("IznajmljivanjeInstrumenta")
                        .HasForeignKey("InstrumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eNote.Services.Database.Korisnik", "Student")
                        .WithMany("IznajmljivanjeInstrumenta")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("eNote.Services.Database.Korisnik", b =>
                {
                    b.HasOne("eNote.Services.Database.Adresa", "Adresa")
                        .WithMany("Korisnici")
                        .HasForeignKey("AdresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eNote.Services.Database.Uloge", "Uloga")
                        .WithMany("Korisnik")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adresa");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eNote.Services.Database.Kurs", b =>
                {
                    b.HasOne("eNote.Services.Database.Korisnik", "Instruktor")
                        .WithMany("Kurs")
                        .HasForeignKey("InstruktorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Instruktor");
                });

            modelBuilder.Entity("eNote.Services.Database.MusicShop", b =>
                {
                    b.HasOne("eNote.Services.Database.Adresa", "Adresa")
                        .WithMany("MusicShops")
                        .HasForeignKey("AdresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eNote.Services.Database.Uloge", "Uloga")
                        .WithMany("MusicShop")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Adresa");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("eNote.Services.Database.Obavijest", b =>
                {
                    b.HasOne("eNote.Services.Database.Predavanje", "Predavanje")
                        .WithMany("Napomena")
                        .HasForeignKey("PredavanjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Predavanje");
                });

            modelBuilder.Entity("eNote.Services.Database.PredajaZadatka", b =>
                {
                    b.HasOne("eNote.Services.Database.Korisnik", "Student")
                        .WithMany("PredajaZadatka")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eNote.Services.Database.Zadatak", "Zadatak")
                        .WithMany("PredajaZadatka")
                        .HasForeignKey("ZadatakId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Zadatak");
                });

            modelBuilder.Entity("eNote.Services.Database.Predavanje", b =>
                {
                    b.HasOne("eNote.Services.Database.Kurs", "Kurs")
                        .WithMany("Predavanje")
                        .HasForeignKey("KursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kurs");
                });

            modelBuilder.Entity("eNote.Services.Database.Prisustvo", b =>
                {
                    b.HasOne("eNote.Services.Database.Predavanje", "Predavanje")
                        .WithMany("Prisustvo")
                        .HasForeignKey("PredavanjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eNote.Services.Database.Korisnik", "Student")
                        .WithMany("Prisustvo")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Predavanje");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("eNote.Services.Database.Upis", b =>
                {
                    b.HasOne("eNote.Services.Database.Kurs", "Kurs")
                        .WithMany("Upis")
                        .HasForeignKey("KursId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("eNote.Services.Database.Korisnik", "Student")
                        .WithMany("Upis")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kurs");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("eNote.Services.Database.Zadatak", b =>
                {
                    b.HasOne("eNote.Services.Database.Predavanje", "Predavanje")
                        .WithMany("Zadaci")
                        .HasForeignKey("PredavanjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Predavanje");
                });

            modelBuilder.Entity("eNote.Services.Database.Adresa", b =>
                {
                    b.Navigation("Korisnici");

                    b.Navigation("MusicShops");
                });

            modelBuilder.Entity("eNote.Services.Database.Instrumenti", b =>
                {
                    b.Navigation("IznajmljivanjeInstrumenta");
                });

            modelBuilder.Entity("eNote.Services.Database.Korisnik", b =>
                {
                    b.Navigation("IznajmljivanjeInstrumenta");

                    b.Navigation("Kurs");

                    b.Navigation("PredajaZadatka");

                    b.Navigation("Prisustvo");

                    b.Navigation("Upis");
                });

            modelBuilder.Entity("eNote.Services.Database.Kurs", b =>
                {
                    b.Navigation("Predavanje");

                    b.Navigation("Upis");
                });

            modelBuilder.Entity("eNote.Services.Database.MusicShop", b =>
                {
                    b.Navigation("Instrumenti");
                });

            modelBuilder.Entity("eNote.Services.Database.Predavanje", b =>
                {
                    b.Navigation("Napomena");

                    b.Navigation("Prisustvo");

                    b.Navigation("Zadaci");
                });

            modelBuilder.Entity("eNote.Services.Database.Uloge", b =>
                {
                    b.Navigation("Korisnik");

                    b.Navigation("MusicShop");
                });

            modelBuilder.Entity("eNote.Services.Database.Zadatak", b =>
                {
                    b.Navigation("PredajaZadatka");
                });
#pragma warning restore 612, 618
        }
    }
}
